plugins {
    id 'java'
    id 'groovy'
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.4.0.2513"
}

group = 'no.protector'
description = 'protector-initializr-java'

bootJar {
    enabled = false
}

allprojects {
    repositories {
        mavenCentral()
        //INITIALIZR:KAFKA-PRODUCER
        maven { url "https://packages.confluent.io/maven/" }
        //INITIALIZR:KAFKA-PRODUCER
    }
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'groovy'

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:2.7.0"
        }
    }

    dependencies {

        // Managed by spring-dependencies
        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        //Self-managed dependencies
        testImplementation 'org.codehaus.groovy:groovy-all:3.0.11'
        testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
        testImplementation "org.spockframework:spock-spring:2.1-groovy-3.0"
    }

    test {
        useJUnitPlatform()
    }

    def jacocoExecutionDataFiles = fileTree(buildDir).include("/jacoco/*.exec")
    jacocoTestReport {
        additionalSourceDirs.from = sourceSets.main.allSource.srcDirs
        sourceDirectories.from = sourceSets.main.allSource.srcDirs
        classDirectories.from = sourceSets.main.output
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
        executionData.from = jacocoExecutionDataFiles
    }
}

task jacocoRootReport(type: JacocoReport, group: 'verification') {
    dependsOn = subprojects.check
    additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = subprojects.sourceSets.main.output
    executionData.from = subprojects.jacocoTestReport.executionData
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    onlyIf = {
        true
    }
}

tasks["sonarqube"].dependsOn "jacocoRootReport"
sonarqube {
    properties {
        property "sonar.projectKey", "protectorinsurance_protector-initializr"
        property "sonar.organization", "protectorinsurance"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths",
                "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }
}
