name: Build Main

on:
  push:
    branches:
      - main

env:
  # Set deploy information for the service
  # INITIALIZR:WEB
  web_image_name: protector-initializr-java-web
  web_service_name: protector-initializr-java-web
  # INITIALIZR:WEB
  # INITIALIZR:KAFKA-CONSUMER
  kafka_image_name: protector-initializr-java-async
  kafka_service_name: protector-initializr-java-async
  # INITIALIZR:KAFKA-CONSUMER

  version: ${{ github.run_number }}

jobs:
  build:
    name: Build & Test
    # Use 'self-hosted' if the build requires any internal resources
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build & Unit tests
        run: ./gradlew build
      - name: System tests
        run: ./gradlew :web-test:test -PsystemTest --info
      # INITIALIZR:WEB
      - uses: actions/upload-artifact@v2
        with:
          name: web-artifact
          path: |
            web/build/libs/*
            elasticapm.properties
            Web.Dockerfile
      # INITIALIZR:WEB
      # INITIALIZR:KAFKA-CONSUMER
      - uses: actions/upload-artifact@v2
        with:
          name: kafka-artifact
          path: |
            kafka/build/libs/*
            elasticapm.properties
            Kafka.Dockerfile
      # INITIALIZR:KAFKA-CONSUMER

  # INITIALIZR:WEB
  build_web_image:
    name: Build web docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: web-artifact
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          file: Web.Dockerfile
          context: .
          platforms: linux/amd64
          pull: true
          push: true
          tags: |
            ghcr.io/protectorinsurance/${{ env.web_image_name }}:${{ env.version }}
            ghcr.io/protectorinsurance/${{ env.web_image_name }}:latest
  # INITIALIZR:WEB

  # INITIALIZR:KAFKA-CONSUMER
  build_async_image:
    name: Build async docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: kafka-artifact
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          file: Kafka.Dockerfile
          context: .
          platforms: linux/amd64
          pull: true
          push: true
          tags: |
            ghcr.io/protectorinsurance/${{ env.kafka_image_name }}:${{ env.version }}
            ghcr.io/protectorinsurance/${{ env.kafka_image_name }}:latest
  # INITIALIZR:KAFKA-CONSUMER

  deploy_test:
    name: Deploy to test
    if: ${{ false }} # TODO: Delete me when application is set up in ICP
    runs-on: self-hosted
    needs: [ build_web_image, build_async_image ]
    steps:
      # INITIALIZR:WEB
      - name: Deploy web to test
        uses: protectorinsurance/swarm-ssh-deployer@v1
        with:
          service-name: ${{ env.web_service_name }}
          image: ghcr.io/protectorinsurance/${{ env.web_image_name }}
          image-tag: ${{ env.version }}
          private-key: ${{ secrets.DEPLOY_PRIVATE_KEY_FILENAME }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          hostname: ${{ secrets.TEST_DEPLOY_HOSTNAME }}
          port: ${{ secrets.DEPLOY_PORT }}
          ghcr-username: ${{ secrets.PROTECTOR_GITHUB_MACHINE_USER }}
          ghcr-token: ${{ secrets.PROTECTOR_GITHUB_MACHINE_TOKEN }}
      # INITIALIZR:WEB
      # INITIALIZR:KAFKA-CONSUMER
      - name: Deploy async to test
        uses: protectorinsurance/swarm-ssh-deployer@v1
        with:
          service-name: ${{ env.kafka_service_name }}
          image: ghcr.io/protectorinsurance/${{ env.kafka_image_name }}
          image-tag: ${{ env.version }}
          private-key: ${{ secrets.DEPLOY_PRIVATE_KEY_FILENAME }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          hostname: ${{ secrets.TEST_DEPLOY_HOSTNAME }}
          port: ${{ secrets.DEPLOY_PORT }}
          ghcr-username: ${{ secrets.PROTECTOR_GITHUB_MACHINE_USER }}
          ghcr-token: ${{ secrets.PROTECTOR_GITHUB_MACHINE_TOKEN }}
      # INITIALIZR:KAFKA-CONSUMER

  # INITIALIZR:INITIALIZR-DEMO
  init_script_sanity_checks:
    name: Init script sanity checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Installing dependencies
        run: pip install requests

      - name: Execute python script
        run: python init.py --web "true" --kafka_consumer "true" --p "my-awesome-app" --n "no.protector.my.awesome.app" --clean "false" --pf jpa --kafka_producer "true"

  verify_clean_builds:
    name: Verify builds w/o demo files
    needs: [ build, init_script_sanity_checks ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - web: 'true'
            kafka_consumer: 'false'
            database: 'none'
            kafka_producer: 'true'
          - web: 'false'
            kafka_consumer: 'true'
            database: 'jpa'
            kafka_producer: 'true'
          - web: 'true'
            kafka_consumer: 'true'
            database: 'jdbc'
            kafka_producer: 'true'
          - web: 'true'
            kafka_consumer: 'false'
            database: 'none'
            kafka_producer: 'false'
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Installing dependencies
        run: pip install requests
      - name: Execute python script
        run: python init.py --web "${{ matrix.web }}" --kafka_consumer "${{ matrix.kafka_consumer }}" --p "my-awesome-app" --n "no.protector.my.awesome.app" --clean "true" --pf "${{ matrix.database }}" --kafka_producer "${{ matrix.kafka_producer }}"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Verify that applicaton still builds
        run: ./gradlew build -PsystemTest --info

  verify_deployment_variations:
    name: Verify deployment variations
    needs: [ build, init_script_sanity_checks ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - web: 'true'
            kafka_consumer: 'false'
          - web: 'false'
            kafka_consumer: 'true'
          - web: 'true'
            kafka_consumer: 'true'
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Installing dependencies
        run: pip install requests
      - name: Execute python script
        run: python init.py --web "${{ matrix.web }}" --kafka_consumer "${{ matrix.kafka_consumer }}" --p "my-awesome-app" --n "no.protector.my.awesome.app" --clean "false" --pf "jdbc" --kafka_producer "true"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Verify that applicaton still builds
        run: ./gradlew build -PsystemTest --info

  verify_persistence_framework_options:
    name: Verify persistence framework variations
    needs: [ build, init_script_sanity_checks ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [ 'none', 'jdbc', 'jpa' ]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Installing dependencies
        run: pip install requests
      - name: Execute python script
        run: python init.py --web "true" --kafka_consumer "true" --p "my-awesome-app" --n "no.protector.my.awesome.app" --clean "false" --pf "${{ matrix.database }}" --kafka_producer "true"
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Verify that applicaton still builds
        run: ./gradlew build -PsystemTest --info
  # INITIALIZR:INITIALIZR-DEMO
