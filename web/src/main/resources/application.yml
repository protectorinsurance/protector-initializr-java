spring:
  application:
    name: protector-initializr
  # INITIALIZR:DATABASE
  datasource:
    url: jdbc:sqlserver://${db.host_port};databaseName=${db.database_name};applicationName=${spring.application.name};sendStringParametersAsUnicode=false;lockTimeout=15000
    username: ${db.username}
    password: ${db.password}
  flyway:
    enabled: true
    outOfOrder: false
    validateOnMigrate: true
    cleanDisabled: true
    locations: classpath:./migrations
    baseline-on-migrate: true
    # INITIALIZR:DATABASE
  # INITIALIZR:KAFKA
  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: true
      bindings:
        output:
          # TODO: HOW TO EDIT CONFIG? WHAT ARE SENSIBLE DEFAULTS?
          destination: employee-saved
          content-type: application/*+avro
      kafka:
        binder:
          brokers: ${broker-urls}
          producer-properties:
            key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            schema.registry.url: ${schema-registry-urls}
            basic.auth.credentials.source: USER_INFO
            basic.auth.user.info: ${kafka.username}:${kafka.password}
          configuration:
            security.protocol: SASL_PLAINTEXT
            sasl.mechanism: OAUTHBEARER
            sasl.login.callback.handler.class: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
            sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username=${kafka.username} password=${kafka.password} metadataServerUrls="${metadata-server-urls}";
        streams:
          binder:
            configuration:
              security.protocol: SASL_PLAINTEXT
              sasl.mechanism: OAUTHBEARER
              sasl.login.callback.handler.class: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
              sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required username=${kafka.username} password=${kafka.password} metadataServerUrls="${metadata-server-urls}";
        schema-registry-client:
          cached: false
  kafka:
    bootstrap-servers: pfsvnocont01:9095,pfsvnocont02:9095,pfsvnocont03:9095
    streams:
      application-id: ${spring.application.name}
      state-dir: /tmp/kafka-streams
    admin:
      fail-fast: true
    client-id: ${spring.application.name}
    properties:
      schema.registry.url: http://pfsvnocont01:8081,http://pfsvnocont02:8081,http://pfsvnocont03:8081
      sasl:
        mechanism: PLAIN
        jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username=${kafka.username} password=${kafka.password};
      security:
        protocol: SASL_PLAINTEXT
  # INITIALIZR:KAFKA

# INITIALIZR:KAFKA
schema-registry-urls: http://pfsvnocont01:8081,http://pfsvnocont02:8081,http://pfsvnocont03:8081
metadata-server-urls: http://pfsvnocont01:8090,http://pfsvnocont02:8090,http://pfsvnocont03:8090
broker-urls: pfsvnocont01:9094,pfsvnocont02:9094,pfsvnocont03:9094
topic-name: ${user.name}-employee_saved
application-id: ${user.name}-initializr-dev
# INITIALIZR:KAFKA

management:
  server.port: 8391

integration:
  userServiceUrl: http://userservice:5002

server:
  port: 8080